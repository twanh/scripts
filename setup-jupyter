#! /usr/bin/env python3.9 

import argparse
import json
import os
import stat
import subprocess

from termcolor import colored

# The venv bin folder that contains the jupyter executable 
DEFAULT_JUPYTER_BIN = '~/bin/jupyterlabs-venv/bin'
# The default name for the venv folder
DEFAULT_VENV_NAME = '.venv'

def _create_argparser() -> argparse.ArgumentParser:

    parser = argparse.ArgumentParser(
        prog='setup-jupyter',
        description="Quickly setup a jupyternotebook in a venv with vim binds"
    )

    parser.add_argument(
        'project-name',
        help='the name of the project',
    )

    parser.add_argument(
        "path",
        help="the path to create the setup in",
    )

    parser.add_argument(
        '--jupyter-bin',
        default=DEFAULT_JUPYTER_BIN,
        help="the path that contains the jupyter executable"
    )

    parser.add_argument(
        '--venv',
        default=DEFAULT_VENV_NAME,
        help='the name of the venv'
    )

    parser.add_argument(
        '--python-interpreter',
        default='python3',
        help='the python interpreter to use (default: python3)'

    )
    return parser


def main() -> int:
    parser = _create_argparser()
    args = vars(parser.parse_args())

    path = args['path']
    proj_name = args['project-name']
    full_path = os.path.expanduser(path)
    jupyter_bin  = args['jupyter_bin']
    venv_name = args['venv']
    python = args['python_interpreter']


    jupyter_path = os.path.expanduser(os.path.join(jupyter_bin, 'jupyter'))
    jupyterlab_path = os.path.expanduser(
        os.path.join(jupyter_bin, 'jupyter-lab')
    )

    print(colored(f"Settuping up jupyter project {proj_name}", 'cyan', attrs=['bold']))

    # Make sure jupyter is installed
    if not os.path.exists(jupyter_path):
        print(
            colored(
                "Could not find jupyter",
                'red',
                attrs=['bold']
            )
        )
        print(
            colored(
                "Did you specify the correct jupter-bin?",
                'red'
            )
        )
        print(
            colored(
                f'{jupyter_bin=},{jupyterlab_path=}',
                'red'
            )
        )
        return 1

    # Create venv for the project
    if not os.path.exists(full_path):
        print(
            colored("The path you specified cannot be found. \
                     Please create it before running this script.",
                    'red',
                    attrs=['bold']
            )
        )
        return 1

    venv_path = os.path.join(path, venv_name)
    print(colored(f"Creating venv @ {venv_path}", 'cyan'))
    ret = subprocess.run((python, '-m', 'venv', venv_path))
    assert ret.returncode == 0

    # Check that venv is installed correctly
    venv_pip_path = os.path.join(venv_path, 'bin/pip')
    venv_python_path = os.path.join(venv_path, 'bin/python')
    assert os.path.exists(venv_pip_path), f"no pip installed in venv {venv_pip_path=}"
    assert os.path.exists(venv_python_path), f"no python installed in venv {venv_python_path=}"

    # Install the kernel
    print(colored('Installing the ipykernel', 'cyan'))
    install_kern_ret = subprocess.run((venv_pip_path, 'install', 'ipykernel'))
    assert install_kern_ret.returncode == 0
    install_kern_venv_ret = subprocess.run((venv_python_path, '-m', 'ipykernel', 'install', '--user', '--name', venv_name))
    assert install_kern_venv_ret.returncode == 0

    with open(os.path.expanduser(f"~/.local/share/jupyter/kernels/{venv_name}/kernel.json"), 'r+') as f:
        data  = json.load(f)
        data['display_name'] = f'{proj_name}_{venv_name}'
        f.seek(0)
        json.dump(data, f, indent=4)
        f.truncate()

    activate_path = os.path.join(venv_path, 'bin/activate')

    script_path = os.path.join(path, 'start')
    with open(script_path, 'w') as start_file:
        start_file.writelines((
            "#!/usr/bin/env bash\n",
            f"source {activate_path}\n",
            f"{jupyter_path} notebook {path}\n"
        ))

    st = os.stat(script_path)
    os.chmod(script_path, st.st_mode | stat.S_IEXEC)

    print(colored("Setup done!", 'green', attrs=['bold']))
    print(colored(f"run: {script_path} to start the notebook", 'cyan'))

    return 0

if __name__ == "__main__":

    raise SystemExit(main())

